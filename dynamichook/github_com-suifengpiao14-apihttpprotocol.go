// Code generated by 'yaegi extract github.com/suifengpiao14/apihttpprotocol'. DO NOT EDIT.

package dynamichook

import (
	"github.com/suifengpiao14/apihttpprotocol"
	"go/constant"
	"go/token"
	"reflect"
)

func init() {
	Symbols["github.com/suifengpiao14/apihttpprotocol/apihttpprotocol"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"BusinessCode":                       reflect.ValueOf(&apihttpprotocol.BusinessCode).Elem(),
		"Business_Code_Fail":                 reflect.ValueOf(&apihttpprotocol.Business_Code_Fail).Elem(),
		"Business_Code_Success":              reflect.ValueOf(&apihttpprotocol.Business_Code_Success).Elem(),
		"ContentTypeJson":                    reflect.ValueOf(constant.MakeFromLiteral("\"application/json\"", token.STRING, 0)),
		"CopyRequest":                        reflect.ValueOf(apihttpprotocol.CopyRequest),
		"CopyResponse":                       reflect.ValueOf(apihttpprotocol.CopyResponse),
		"ERRIOFnIsNil":                       reflect.ValueOf(&apihttpprotocol.ERRIOFnIsNil).Elem(),
		"MetaData_CurlCmd":                   reflect.ValueOf(constant.MakeFromLiteral("\"curl_cmd\"", token.STRING, 0)),
		"MetaData_HttpCode":                  reflect.ValueOf(constant.MakeFromLiteral("\"httpCode\"", token.STRING, 0)),
		"NewClientProtocol":                  reflect.ValueOf(apihttpprotocol.NewClientProtocol),
		"NewClitentProtocol":                 reflect.ValueOf(apihttpprotocol.NewClitentProtocol),
		"NewGinReadWriteMiddleware":          reflect.ValueOf(apihttpprotocol.NewGinReadWriteMiddleware),
		"NewServerProtocol":                  reflect.ValueOf(apihttpprotocol.NewServerProtocol),
		"RequestMiddleLog":                   reflect.ValueOf(apihttpprotocol.RequestMiddleLog),
		"RequestMiddleSetLog":                reflect.ValueOf(apihttpprotocol.RequestMiddleSetLog),
		"ResponseMiddleCodeMessageForClient": reflect.ValueOf(apihttpprotocol.ResponseMiddleCodeMessageForClient),
		"ResponseMiddleCodeMessageForServer": reflect.ValueOf(apihttpprotocol.ResponseMiddleCodeMessageForServer),
		"ResponseMiddleLog":                  reflect.ValueOf(apihttpprotocol.ResponseMiddleLog),
		"ResponseMiddleSetLog":               reflect.ValueOf(apihttpprotocol.ResponseMiddleSetLog),

		// type definitions
		"ClientProtocol":               reflect.ValueOf((*apihttpprotocol.ClientProtocol)(nil)),
		"ContextReqeustMessageKeyType": reflect.ValueOf((*apihttpprotocol.ContextReqeustMessageKeyType)(nil)),
		"HandlerFuncRequestMessage":    reflect.ValueOf((*apihttpprotocol.HandlerFuncRequestMessage)(nil)),
		"HandlerFuncResponseMessage":   reflect.ValueOf((*apihttpprotocol.HandlerFuncResponseMessage)(nil)),
		"HttpError":                    reflect.ValueOf((*apihttpprotocol.HttpError)(nil)),
		"LogI":                         reflect.ValueOf((*apihttpprotocol.LogI)(nil)),
		"LogIgnore":                    reflect.ValueOf((*apihttpprotocol.LogIgnore)(nil)),
		"Metadata":                     reflect.ValueOf((*apihttpprotocol.Metadata)(nil)),
		"RequestMessage":               reflect.ValueOf((*apihttpprotocol.RequestMessage)(nil)),
		"Response":                     reflect.ValueOf((*apihttpprotocol.Response)(nil)),
		"ResponseMessage":              reflect.ValueOf((*apihttpprotocol.ResponseMessage)(nil)),
		"ServerProtocol":               reflect.ValueOf((*apihttpprotocol.ServerProtocol)(nil)),

		// interface wrapper definitions
		"_LogI": reflect.ValueOf((*_github_com_suifengpiao14_apihttpprotocol_LogI)(nil)),
	}
}

// _github_com_suifengpiao14_apihttpprotocol_LogI is an interface wrapper for LogI type
type _github_com_suifengpiao14_apihttpprotocol_LogI struct {
	IValue interface{}
	WDebug func(v ...any)
	WError func(v ...any)
	WInfo  func(v ...any)
	WWarn  func(v ...any)
}

func (W _github_com_suifengpiao14_apihttpprotocol_LogI) Debug(v ...any) {
	W.WDebug(v...)
}
func (W _github_com_suifengpiao14_apihttpprotocol_LogI) Error(v ...any) {
	W.WError(v...)
}
func (W _github_com_suifengpiao14_apihttpprotocol_LogI) Info(v ...any) {
	W.WInfo(v...)
}
func (W _github_com_suifengpiao14_apihttpprotocol_LogI) Warn(v ...any) {
	W.WWarn(v...)
}
